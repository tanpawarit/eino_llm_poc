package nodes

import (
	"context"
	"fmt"
	"log"
	"eino_llm_poc/pkg"
	"eino_llm_poc/internal/core"
)

// ResponseNode handles LLM response generation
type ResponseNode struct {
	config core.Config
}

// NewResponseNode creates a new response generation node
func NewResponseNode(config core.Config) *ResponseNode {
	return &ResponseNode{
		config: config,
	}
}

// Execute generates a response based on NLU analysis and context
func (r *ResponseNode) Execute(ctx context.Context, input core.NodeInput) (core.NodeOutput, error) {
	log.Printf("üí¨ Generating response for customer: %s", input.CustomerID)

	// Get NLU result
	if input.NLUResult == nil {
		return core.NodeOutput{Error: fmt.Errorf("no NLU result available")}, nil
	}

	// Generate response based on primary intent
	response := r.generateResponse(input)

	// Check if tools are needed
	needTools := r.checkToolsRequired(input)

	// Prepare output
	output := core.NodeOutput{
		Data: map[string]any{
			"response":       response,
			"need_tools":     needTools,
			"response_type":  "direct", // or "tool_assisted"
		},
		Complete: !needTools, // Complete if no tools needed
	}

	if needTools {
		output.NextNode = "tools"
		output.Data["tools_required"] = r.getRequiredTools(input)
	} else {
		output.NextNode = "complete"
	}

	log.Printf("‚úÖ Response generated: length=%d, tools_needed=%v", len(response), needTools)

	return output, nil
}

// GetName returns the node name
func (r *ResponseNode) GetName() string {
	return "response"
}

// GetType returns the node type
func (r *ResponseNode) GetType() core.NodeType {
	return core.NodeTypeResponse
}

// generateResponse creates a response based on NLU analysis
func (r *ResponseNode) generateResponse(input core.NodeInput) string {
	nlu := input.NLUResult
	
	// Simple response generation based on primary intent
	switch nlu.PrimaryIntent {
	case "greet":
		return "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	case "purchase_intent":
		productEntities := r.extractEntitiesByType(nlu.Entities, "product")
		if len(productEntities) > 0 {
			return fmt.Sprintf("‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠%s ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö? ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?", productEntities[0].Value)
		}
		return "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	case "inquiry_intent":
		return "‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	case "ask_price":
		return "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Ñ‡∏£‡∏±‡∏ö"
		
	case "support_intent":
		return "‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏µ‡∏°‡∏ã‡∏±‡∏û‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	case "complain_intent", "complaint":
		return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏°‡∏≤‡∏Å‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	case "cancel_order":
		return "‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠ ‡πÉ‡∏´‡πâ‡∏ú‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏ä‡πá‡∏Ñ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
		
	case "compare_product":
		return "‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÑ‡∏´‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏ó‡∏£‡∏≤‡∏ö‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?"
		
	default:
		return "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ú‡∏°‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö"
	}
}

// checkToolsRequired determines if tools are needed for this request
func (r *ResponseNode) checkToolsRequired(input core.NodeInput) bool {
	nlu := input.NLUResult
	
	// Tools required for specific intents
	toolRequiredIntents := map[string]bool{
		"ask_price":       true, // Need product database lookup
		"purchase_intent": true, // Need product database lookup
		"inquiry_intent":  true, // Need product database lookup
		"compare_product": true, // Need product comparison tools
		"cancel_order":    true, // Need order management tools
		"support_intent":  true, // Might need ticket system
	}
	
	return toolRequiredIntents[nlu.PrimaryIntent]
}

// getRequiredTools returns the list of tools needed
func (r *ResponseNode) getRequiredTools(input core.NodeInput) []string {
	nlu := input.NLUResult
	
	switch nlu.PrimaryIntent {
	case "ask_price":
		return []string{"product_database", "price_lookup"}
	case "purchase_intent":
		return []string{"product_database"}
	case "inquiry_intent":
		return []string{"product_database"}
	case "compare_product":
		return []string{"product_database", "comparison_engine"}
	case "cancel_order":
		return []string{"order_management", "cancellation_service"}
	case "support_intent":
		return []string{"ticket_system", "support_database"}
	default:
		return []string{}
	}
}

// extractEntitiesByType extracts entities of a specific type
func (r *ResponseNode) extractEntitiesByType(entities []pkg.Entity, entityType string) []pkg.Entity {
	var result []pkg.Entity
	for _, entity := range entities {
		if entity.Type == entityType {
			result = append(result, entity)
		}
	}
	return result
}