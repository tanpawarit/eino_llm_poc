package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/cloudwego/eino-ext/components/model/openai"
	"github.com/cloudwego/eino/compose"
	"github.com/cloudwego/eino/schema"
	"github.com/joho/godotenv"
)

// Template ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤
type TemplateData struct {
	UserName      string
	ProjectName   string
	Language      string
	Difficulty    string
	Context       string
	Question      string
	Examples      []string
	Requirements  []string
}

// main function for running chat template examples
func main() {
	runChatTemplateExample()
}

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Chat Template Node - ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡πÅ‡∏ö‡∏ö dynamic
func runChatTemplateExample() {
	// Load environment
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	ctx := context.Background()
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		fmt.Println("Please set OPENROUTER_API_KEY environment variable")
		return
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á Chat Model
	config := &openai.ChatModelConfig{
		APIKey:  apiKey,
		BaseURL: "https://openrouter.ai/api/v1",
		Model:   "openai/gpt-3.5-turbo",
	}

	model, err := openai.NewChatModel(ctx, config)
	if err != nil {
		fmt.Printf("Error creating model: %v\n", err)
		return
	}

	// === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 1: Basic Template Node ===
	fmt.Println("=== Basic Template Node ===")
	runBasicTemplateNode(ctx, model)

	// === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 2: Advanced Template with Conditions ===
	fmt.Println("\n=== Advanced Template with Conditions ===")
	runAdvancedTemplateNode(ctx, model)

	// === ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á 3: Multi-Template System ===
	fmt.Println("\n=== Multi-Template System ===")
	runMultiTemplateNode(ctx, model)
}

// Basic Template Node
func runBasicTemplateNode(ctx context.Context, model *openai.ChatModel) {
	graph := compose.NewGraph[TemplateData, string]()

	// Chat Template Node - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô template
	basicTemplateNode := compose.InvokableLambda(func(ctx context.Context, data TemplateData) ([]*schema.Message, error) {
		// Basic template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
		systemTemplate := `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏™‡∏≠‡∏ô {{.Language}} ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏π‡∏á

Project Context: {{.ProjectName}}
Student Level: {{.Difficulty}}
Student Name: {{.UserName}}

‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ`

		userTemplate := `‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {{.Question}}

{{if .Context}}
‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: {{.Context}}
{{end}}

{{if .Examples}}
‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:
{{range .Examples}}
- {{.}}
{{end}}
{{end}}`

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á templates
		systemTmpl, err := template.New("system").Parse(systemTemplate)
		if err != nil {
			return nil, fmt.Errorf("error parsing system template: %w", err)
		}

		userTmpl, err := template.New("user").Parse(userTemplate)
		if err != nil {
			return nil, fmt.Errorf("error parsing user template: %w", err)
		}

		// ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô templates
		var systemBuf strings.Builder
		if err := systemTmpl.Execute(&systemBuf, data); err != nil {
			return nil, fmt.Errorf("error executing system template: %w", err)
		}

		var userBuf strings.Builder
		if err := userTmpl.Execute(&userBuf, data); err != nil {
			return nil, fmt.Errorf("error executing user template: %w", err)
		}

		messages := []*schema.Message{
			schema.SystemMessage(systemBuf.String()),
			schema.UserMessage(userBuf.String()),
		}

		fmt.Printf("üéØ Template Node: Generated %d messages for %s\n", len(messages), data.UserName)
		fmt.Printf("   System: %s...\n", systemBuf.String()[:100])
		fmt.Printf("   User: %s...\n", userBuf.String()[:100])

		return messages, nil
	})

	// Chat Model Node
	chatModelNode := compose.InvokableLambda(func(ctx context.Context, messages []*schema.Message) (string, error) {
		fmt.Printf("ü§ñ Chat Model: Processing templated messages\n")
		
		response, err := model.Generate(ctx, messages)
		if err != nil {
			return "", fmt.Errorf("chat model error: %w", err)
		}

		return response.Content, nil
	})

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° nodes
	graph.AddLambdaNode("template", basicTemplateNode)
	graph.AddLambdaNode("chat", chatModelNode)

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° edges
	graph.AddEdge(compose.START, "template")
	graph.AddEdge("template", "chat")
	graph.AddEdge("chat", compose.END)

	// Compile
	runnable, err := graph.Compile(ctx)
	if err != nil {
		fmt.Printf("Error compiling graph: %v\n", err)
		return
	}

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
	testData := []TemplateData{
		{
			UserName:    "‡∏™‡∏°‡∏ä‡∏≤‡∏¢",
			ProjectName: "Go Microservices API",
			Language:    "Go",
			Difficulty:  "Beginner",
			Question:    "Goroutine ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£ ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏á?",
			Context:     "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ concurrent programming ‡πÉ‡∏ô Go",
			Examples:    []string{"go func()", "channels", "sync.WaitGroup"},
		},
		{
			UserName:    "‡πÅ‡∏°‡∏£‡∏µ‡πà",
			ProjectName: "React E-commerce",
			Language:    "JavaScript",
			Difficulty:  "Intermediate",
			Question:    "‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ state ‡πÉ‡∏ô React?",
			Examples:    []string{"useState", "useReducer", "Context API"},
		},
	}

	for i, data := range testData {
		fmt.Printf("\n--- Test %d ---\n", i+1)
		result, err := runnable.Invoke(ctx, data)
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			continue
		}
		fmt.Printf("Response for %s:\n%s\n", data.UserName, result)
		fmt.Println(strings.Repeat("-", 80))
	}
}

// Advanced Template with Conditions
func runAdvancedTemplateNode(ctx context.Context, model *openai.ChatModel) {
	graph := compose.NewGraph[map[string]interface{}, string]()

	// Advanced Template Node with conditional logic
	advancedTemplateNode := compose.InvokableLambda(func(ctx context.Context, input map[string]interface{}) ([]*schema.Message, error) {
		// Extract data from input
		templateType := input["template_type"].(string)
		data := input["data"].(map[string]interface{})

		var systemTemplate, userTemplate string

		// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å template ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
		switch templateType {
		case "code_review":
			systemTemplate = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Senior Developer ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç {{.language}}

Review Guidelines:
{{if eq .difficulty "beginner"}}
- ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
- ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÅ‡∏ô‡∏ß‡∏Ñ‡∏¥‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
{{else if eq .difficulty "intermediate"}}
- ‡∏ä‡∏µ‡πâ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á ‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ best practices
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ patterns ‡πÅ‡∏•‡∏∞ techniques
{{else}}
- ‡πÉ‡∏´‡πâ feedback ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á performance ‡πÅ‡∏•‡∏∞ security
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ advanced patterns ‡πÅ‡∏•‡∏∞ optimizations
{{end}}

Project Type: {{.project_type}}`

			userTemplate = `‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ:

` + "```" + `{{.language}}
{{.code}}
` + "```" + `

{{if .specific_concerns}}
‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©:
{{range .specific_concerns}}
- {{.}}
{{end}}
{{end}}`

		case "documentation":
			systemTemplate = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç

Documentation Style:
{{if eq .audience "developer"}}
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏Ñ‡πâ‡∏î
- ‡∏£‡∏ß‡∏° API references ‡πÅ‡∏•‡∏∞ code examples
{{else if eq .audience "user"}}
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
- ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏á‡πà‡∏≤‡∏¢ ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
{{else}}
- ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°
{{end}}

Project: {{.project_name}}`

			userTemplate = `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {{.topic}}

{{if .sections}}
‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
{{range .sections}}
- {{.}}
{{end}}
{{end}}

{{if .examples_needed}}
‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {{.examples_needed}}
{{end}}`

		case "troubleshooting":
			systemTemplate = `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô troubleshooting ‡∏£‡∏∞‡∏ö‡∏ö {{.system_type}}

Problem-Solving Approach:
1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
2. ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏≤‡∏° priority
3. ‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï

{{if .urgency_level}}
Urgency Level: {{.urgency_level}}
{{if eq .urgency_level "critical"}}
‚ö†Ô∏è ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏£‡∏≤‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
{{end}}
{{end}}`

			userTemplate = `‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô:
{{.problem_description}}

{{if .error_messages}}
Error Messages:
{{range .error_messages}}
- {{.}}
{{end}}
{{end}}

{{if .system_info}}
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö:
{{.system_info}}
{{end}}

{{if .steps_tried}}
‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß:
{{range .steps_tried}}
- {{.}}
{{end}}
{{end}}`

		default:
			return nil, fmt.Errorf("unknown template type: %s", templateType)
		}

		// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô templates
		systemTmpl, err := template.New("system").Parse(systemTemplate)
		if err != nil {
			return nil, fmt.Errorf("error parsing system template: %w", err)
		}

		userTmpl, err := template.New("user").Parse(userTemplate)
		if err != nil {
			return nil, fmt.Errorf("error parsing user template: %w", err)
		}

		var systemBuf strings.Builder
		if err := systemTmpl.Execute(&systemBuf, data); err != nil {
			return nil, fmt.Errorf("error executing system template: %w", err)
		}

		var userBuf strings.Builder
		if err := userTmpl.Execute(&userBuf, data); err != nil {
			return nil, fmt.Errorf("error executing user template: %w", err)
		}

		messages := []*schema.Message{
			schema.SystemMessage(systemBuf.String()),
			schema.UserMessage(userBuf.String()),
		}

		fmt.Printf("üéØ Advanced Template: Generated %s template\n", templateType)
		return messages, nil
	})

	// Chat Model Node
	chatModelNode := compose.InvokableLambda(func(ctx context.Context, messages []*schema.Message) (string, error) {
		response, err := model.Generate(ctx, messages)
		if err != nil {
			return "", fmt.Errorf("chat model error: %w", err)
		}
		return response.Content, nil
	})

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° nodes
	graph.AddLambdaNode("advanced_template", advancedTemplateNode)
	graph.AddLambdaNode("chat", chatModelNode)

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° edges
	graph.AddEdge(compose.START, "advanced_template")
	graph.AddEdge("advanced_template", "chat")
	graph.AddEdge("chat", compose.END)

	// Compile
	runnable, err := graph.Compile(ctx)
	if err != nil {
		fmt.Printf("Error compiling advanced graph: %v\n", err)
		return
	}

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö templates ‡∏ï‡πà‡∏≤‡∏á‡πÜ
	testCases := []map[string]interface{}{
		{
			"template_type": "code_review",
			"data": map[string]interface{}{
				"language":      "Go",
				"difficulty":    "intermediate",
				"project_type":  "Web API",
				"code":          "func process(data []string) {\n    for i := 0; i < len(data); i++ {\n        fmt.Println(data[i])\n    }\n}",
				"specific_concerns": []string{"performance", "Go idioms"},
			},
		},
		{
			"template_type": "documentation",
			"data": map[string]interface{}{
				"audience":        "developer",
				"project_name":    "Eino Graph Library",
				"topic":           "Getting Started Guide",
				"sections":        []string{"Installation", "Basic Usage", "Examples"},
				"examples_needed": "true",
			},
		},
		{
			"template_type": "troubleshooting",
			"data": map[string]interface{}{
				"system_type":         "Go Web Service",
				"urgency_level":       "high",
				"problem_description": "API response time ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≤‡∏Å 100ms ‡πÄ‡∏õ‡πá‡∏ô 2000ms",
				"error_messages":      []string{"context deadline exceeded", "connection timeout"},
				"system_info":         "Go 1.21, 8GB RAM, Docker container",
				"steps_tried":         []string{"restart service", "check logs", "monitor CPU"},
			},
		},
	}

	for i, testCase := range testCases {
		templateType := testCase["template_type"].(string)
		fmt.Printf("\n--- Advanced Template Test %d (%s) ---\n", i+1, templateType)
		
		result, err := runnable.Invoke(ctx, testCase)
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			continue
		}
		
		fmt.Printf("Result for %s template:\n%s\n", templateType, result)
		fmt.Println(strings.Repeat("-", 80))
	}
}

// Multi-Template System
func runMultiTemplateNode(ctx context.Context, model *openai.ChatModel) {
	graph := compose.NewGraph[map[string]interface{}, string]()

	// Template Selector - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å template ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
	templateSelector := compose.InvokableLambda(func(ctx context.Context, input map[string]interface{}) (string, error) {
		userInput := input["user_input"].(string)
		_ = input["context"].(map[string]interface{}) // not used in this example

		// AI-powered template selection logic
		userInputLower := strings.ToLower(userInput)
		
		var selectedTemplate string
		if strings.Contains(userInputLower, "review") || strings.Contains(userInputLower, "‡πÇ‡∏Ñ‡πâ‡∏î") {
			selectedTemplate = "code_review"
		} else if strings.Contains(userInputLower, "document") || strings.Contains(userInputLower, "‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£") {
			selectedTemplate = "documentation"
		} else if strings.Contains(userInputLower, "problem") || strings.Contains(userInputLower, "error") || strings.Contains(userInputLower, "‡∏õ‡∏±‡∏ç‡∏´‡∏≤") {
			selectedTemplate = "troubleshooting"
		} else if strings.Contains(userInputLower, "explain") || strings.Contains(userInputLower, "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢") {
			selectedTemplate = "explanation"
		} else {
			selectedTemplate = "general"
		}

		fmt.Printf("ü§ñ Template Selector: Selected '%s' template for input\n", selectedTemplate)
		
		// Combine template type with original input
		result := fmt.Sprintf("%s|%s", selectedTemplate, userInput)
		return result, nil
	})

	// Multi-Template Node
	multiTemplateNode := compose.InvokableLambda(func(ctx context.Context, input string) ([]*schema.Message, error) {
		parts := strings.SplitN(input, "|", 2)
		if len(parts) != 2 {
			return nil, fmt.Errorf("invalid input format")
		}

		templateType := parts[0]
		userInput := parts[1]

		var systemPrompt string
		switch templateType {
		case "code_review":
			systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô Senior Developer ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡∏≤‡∏£ review ‡πÇ‡∏Ñ‡πâ‡∏î ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå"
		case "documentation":
			systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢"
		case "troubleshooting":
			systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô troubleshooting ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
		case "explanation":
			systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"
		default:
			systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏á"
		}

		messages := []*schema.Message{
			schema.SystemMessage(systemPrompt),
			schema.UserMessage(userInput),
		}

		fmt.Printf("üéØ Multi-Template: Using %s template\n", templateType)
		return messages, nil
	})

	// Chat Model Node
	chatModelNode := compose.InvokableLambda(func(ctx context.Context, messages []*schema.Message) (string, error) {
		response, err := model.Generate(ctx, messages)
		if err != nil {
			return "", fmt.Errorf("chat model error: %w", err)
		}
		return response.Content, nil
	})

	// ‡πÄ‡∏û‡∏¥‡πà‡∏° nodes
	graph.AddLambdaNode("selector", templateSelector)
	graph.AddLambdaNode("multi_template", multiTemplateNode)
	graph.AddLambdaNode("chat", chatModelNode)

	// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° edges
	graph.AddEdge(compose.START, "selector")
	graph.AddEdge("selector", "multi_template")
	graph.AddEdge("multi_template", "chat")
	graph.AddEdge("chat", compose.END)

	// Compile
	runnable, err := graph.Compile(ctx)
	if err != nil {
		fmt.Printf("Error compiling multi-template graph: %v\n", err)
		return
	}

	// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö
	testInputs := []map[string]interface{}{
		{
			"user_input": "‡∏ä‡πà‡∏ß‡∏¢‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÇ‡∏Ñ‡πâ‡∏î Go function ‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢",
			"context":    map[string]interface{}{"project": "web_api"},
		},
		{
			"user_input": "‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ API documentation",
			"context":    map[string]interface{}{"audience": "developers"},
		},
		{
			"user_input": "API ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏°‡∏≤‡∏Å ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏£",
			"context":    map[string]interface{}{"system": "microservices"},
		},
		{
			"user_input": "‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢ Eino Graph ‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏´‡∏ô‡πà‡∏≠‡∏¢",
			"context":    map[string]interface{}{"level": "beginner"},
		},
		{
			"user_input": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡∏ö‡πâ‡∏≤‡∏á",
			"context":    map[string]interface{}{},
		},
	}

	for i, testInput := range testInputs {
		fmt.Printf("\n--- Multi-Template Test %d ---\n", i+1)
		fmt.Printf("Input: %s\n", testInput["user_input"])
		
		result, err := runnable.Invoke(ctx, testInput)
		if err != nil {
			fmt.Printf("Error: %v\n", err)
			continue
		}
		
		fmt.Printf("Response:\n%s\n", result)
		fmt.Println(strings.Repeat("-", 80))
	}
}