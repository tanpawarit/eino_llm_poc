package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"time"

	"github.com/cloudwego/eino-ext/components/model/openai"
	"github.com/cloudwego/eino/components/prompt"
	"github.com/cloudwego/eino/compose"
	"github.com/cloudwego/eino/schema"
	"github.com/joho/godotenv"
)

// WorkflowStep represents each step in our processing workflow
type WorkflowStep struct {
	StepName string         `json:"step_name"`
	Input    map[string]any `json:"input"`
	Output   string         `json:"output"`
	Duration time.Duration  `json:"duration"`
	Success  bool           `json:"success"`
	Error    error          `json:"error,omitempty"`
}

// WorkflowResult represents the complete workflow execution result
type WorkflowResult struct {
	UserMessage     string         `json:"user_message"`
	DetectedIntent  string         `json:"detected_intent"`
	ProcessedResult string         `json:"processed_result"`
	Steps           []WorkflowStep `json:"steps"`
	TotalDuration   time.Duration  `json:"total_duration"`
	Success         bool           `json:"success"`
}

// Step 1: Intent Detection Chain
func CreateIntentDetectionChain(ctx context.Context, model *openai.ChatModel) (compose.Runnable[map[string]any, *schema.Message], error) {
	systemText := `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ 

‡πÉ‡∏´‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏õ‡πá‡∏ô intent ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
- greeting: ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, ‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ, hello
- question: ‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏∞‡πÑ‡∏£, ‡∏ó‡∏≥‡πÑ‡∏°, ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£
- request: ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ä‡πà‡∏ß‡∏¢, ‡∏™‡∏≠‡∏ô, ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
- calculation: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏ß‡∏Å, ‡∏•‡∏ö, ‡∏Ñ‡∏π‡∏ì, ‡∏´‡∏≤‡∏£
- goodbye: ‡∏Å‡∏≤‡∏£‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏ö‡∏≤‡∏¢, ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô, ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ

‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠ intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÄ‡∏ä‡πà‡∏ô: greeting, question, request, calculation, goodbye`

	userText := `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {message}

Intent:`

	// Create template messages
	messages := []schema.MessagesTemplate{
		schema.SystemMessage(systemText),
		schema.UserMessage(userText),
	}

	// Create the template
	template := prompt.FromMessages(schema.FString, messages...)

	// Create and compile the chain
	chain, err := compose.NewChain[map[string]any, *schema.Message]().
		AppendChatTemplate(template).
		AppendChatModel(model).
		Compile(ctx)

	return chain, err
}

// Step 2: Content Processing Chain
func CreateContentProcessingChain(ctx context.Context, model *openai.ChatModel) (compose.Runnable[map[string]any, *schema.Message], error) {
	systemText := `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô AI ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≤‡∏° intent ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏

‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏° intent:
- greeting: ‡∏ï‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡∏™‡∏∏‡∏†‡∏≤‡∏û
- question: ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
- request: ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
- calculation: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
- goodbye: ‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£

‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå`

	userText := `‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {message}
Intent ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö: {intent}

‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á:`

	// Create template messages
	messages := []schema.MessagesTemplate{
		schema.SystemMessage(systemText),
		schema.UserMessage(userText),
	}

	// Create the template
	template := prompt.FromMessages(schema.FString, messages...)

	// Create and compile the chain
	chain, err := compose.NewChain[map[string]any, *schema.Message]().
		AppendChatTemplate(template).
		AppendChatModel(model).
		Compile(ctx)

	return chain, err
}

// Execute workflow with multiple chains
func ExecuteWorkflow(ctx context.Context, intentChain, processingChain compose.Runnable[map[string]any, *schema.Message], userMessage string) (*WorkflowResult, error) {
	startTime := time.Now()

	result := &WorkflowResult{
		UserMessage: userMessage,
		Steps:       []WorkflowStep{},
		Success:     false,
	}

	fmt.Printf("üöÄ Starting workflow for: %s\n", userMessage)

	// Step 1: Intent Detection
	step1Start := time.Now()
	intentResponse, err := intentChain.Invoke(ctx, map[string]any{
		"message": userMessage,
	})
	step1Duration := time.Since(step1Start)

	step1 := WorkflowStep{
		StepName: "intent_detection",
		Input:    map[string]any{"message": userMessage},
		Output:   intentResponse.Content,
		Duration: step1Duration,
		Success:  err == nil,
		Error:    err,
	}
	result.Steps = append(result.Steps, step1)

	if err != nil {
		result.TotalDuration = time.Since(startTime)
		return result, fmt.Errorf("intent detection failed: %v", err)
	}

	// Clean up intent response
	detectedIntent := strings.TrimSpace(strings.ToLower(intentResponse.Content))
	result.DetectedIntent = detectedIntent

	fmt.Printf("üìä Step 1 Complete: Intent = %s (%.2fms)\n", detectedIntent, float64(step1Duration.Nanoseconds())/1000000)

	// Step 2: Content Processing
	step2Start := time.Now()
	processResponse, err := processingChain.Invoke(ctx, map[string]any{
		"message": userMessage,
		"intent":  detectedIntent,
	})
	step2Duration := time.Since(step2Start)

	step2 := WorkflowStep{
		StepName: "content_processing",
		Input:    map[string]any{"message": userMessage, "intent": detectedIntent},
		Output:   processResponse.Content,
		Duration: step2Duration,
		Success:  err == nil,
		Error:    err,
	}
	result.Steps = append(result.Steps, step2)

	if err != nil {
		result.TotalDuration = time.Since(startTime)
		return result, fmt.Errorf("content processing failed: %v", err)
	}

	result.ProcessedResult = processResponse.Content
	result.TotalDuration = time.Since(startTime)
	result.Success = true

	fmt.Printf("üìù Step 2 Complete: Response generated (%.2fms)\n", float64(step2Duration.Nanoseconds())/1000000)
	fmt.Printf("‚úÖ Workflow completed successfully (%.2fms total)\n", float64(result.TotalDuration.Nanoseconds())/1000000)

	return result, nil
}

func main() {
	// Load environment
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	ctx := context.Background()
	apiKey := os.Getenv("OPENROUTER_API_KEY")
	if apiKey == "" {
		fmt.Println("Please set OPENROUTER_API_KEY environment variable")
		return
	}

	// Create model configuration
	config := &openai.ChatModelConfig{
		APIKey:  apiKey,
		BaseURL: "https://openrouter.ai/api/v1",
		Model:   "openai/gpt-3.5-turbo",
	}

	model, err := openai.NewChatModel(ctx, config)
	if err != nil {
		fmt.Printf("Error creating model: %v\n", err)
		return
	}

	// Create workflow chains
	fmt.Printf("‚öôÔ∏è Creating Eino workflow chains...\n")

	intentChain, err := CreateIntentDetectionChain(ctx, model)
	if err != nil {
		fmt.Printf("Error creating intent chain: %v\n", err)
		return
	}

	processingChain, err := CreateContentProcessingChain(ctx, model)
	if err != nil {
		fmt.Printf("Error creating processing chain: %v\n", err)
		return
	}

	fmt.Printf("‚úÖ Chains created successfully!\n\n")

	// Test scenarios
	testScenarios := []struct {
		message     string
		description string
	}{
		{"‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö", "Greeting"},
		{"Python ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£?", "Question"},
		{"‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° Hello World ‡∏´‡∏ô‡πà‡∏≠‡∏¢", "Help Request"},
		{"‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì 15 + 27", "Calculation"},
		{"‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö ‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", "Goodbye"},
		{"‡∏™‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Git ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö", "Learning Request"},
	}

	fmt.Println("üîÑ Eino Simple Workflow Demo")
	fmt.Println("============================")

	for i, scenario := range testScenarios {
		fmt.Printf("\nüß™ Test %d: %s\n", i+1, scenario.description)
		fmt.Printf("Input: %s\n", scenario.message)
		fmt.Println("---")

		// Execute the workflow
		result, err := ExecuteWorkflow(ctx, intentChain, processingChain, scenario.message)

		if err != nil {
			fmt.Printf("‚ùå Workflow failed: %v\n", err)
			continue
		}

		// Display detailed results
		fmt.Printf("üéØ Final Result:\n")
		fmt.Printf("   Intent: %s\n", result.DetectedIntent)
		fmt.Printf("   Response: %s\n", result.ProcessedResult)
		fmt.Printf("   Steps: %d\n", len(result.Steps))
		fmt.Printf("   Total Time: %.2fms\n", float64(result.TotalDuration.Nanoseconds())/1000000)
		fmt.Printf("   Success: %t\n", result.Success)

		// Show step breakdown
		fmt.Printf("üìà Step Breakdown:\n")
		for j, step := range result.Steps {
			status := "‚úÖ"
			if !step.Success {
				status = "‚ùå"
			}
			fmt.Printf("   %d. %s %s (%.2fms)\n",
				j+1,
				step.StepName,
				status,
				float64(step.Duration.Nanoseconds())/1000000)
		}
	}

	fmt.Println("\nüéâ Eino Simple Workflow Demo Completed!")
	fmt.Println("Key Features Demonstrated:")
	fmt.Println("  ‚úÖ Multi-step Eino chain workflows")
	fmt.Println("  ‚úÖ Template-based prompt engineering")
	fmt.Println("  ‚úÖ Intent-driven content processing")
	fmt.Println("  ‚úÖ Performance monitoring and timing")
	fmt.Println("  ‚úÖ Error handling and step tracking")
	fmt.Println("  ‚úÖ Real LLM integration")
	fmt.Println("  ‚úÖ Structured workflow execution")
}
